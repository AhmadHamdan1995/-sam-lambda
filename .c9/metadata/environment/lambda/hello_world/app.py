{"filter":false,"title":"app.py","tooltip":"/lambda/hello_world/app.py","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":42,"column":0},"action":"remove","lines":["import json","","# import requests","","","def lambda_handler(event, context):","    \"\"\"Sample pure Lambda function","","    Parameters","    ----------","    event: dict, required","        API Gateway Lambda Proxy Input Format","","        Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format","","    context: object, required","        Lambda Context runtime methods and attributes","","        Context doc: https://docs.aws.amazon.com/lambda/latest/dg/python-context-object.html","","    Returns","    ------","    API Gateway Lambda Proxy Output Format: dict","","        Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html","    \"\"\"","","    # try:","    #     ip = requests.get(\"http://checkip.amazonaws.com/\")","    # except requests.RequestException as e:","    #     # Send some context about this error to Lambda Logs","    #     print(e)","","    #     raise e","","    return {","        \"statusCode\": 200,","        \"body\": json.dumps({","            \"message\": \"hello world\",","            # \"location\": ip.text.replace(\"\\n\", \"\")","        }),","    }",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":94},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    if event['httpMethod'] != \"POST\":","        return generate_response(404, \"Invalid request method\")","    ","    request = json.loads(event['body'])","    ","    generate_image(request['prompt'])","","    return generate_response(200, \"Image generated successfully and uploaded to S3\")","","def generate_response(response_code, message):","    return {","        \"statusCode\": response_code,","        \"body\": message,","        \"headers\": { ","            'Content-Type': 'application/json',","            'Access-Control-Allow-Origin': '*',","            'Access-Control-Allow-Headers': '*',","            \"Access-Control-Allow-Methods\": \"POST\" ","        }","    }","","def generate_image(prompt):","    # Set up the AWS clients","","    bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","    s3_client = boto3.client(\"s3\")","","    # Define the model ID and S3 bucket name (replace with your actual bucket name)","    model_id = \"amazon.titan-image-generator-v1\"","","    seed = random.randint(0, 2147483647)","    s3_image_path = f\"generated_images/titan_{seed}.png\"","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","    model_response = json.loads(response[\"body\"].read())","","    # Extract and decode the Base64 image data","    base64_image_data = model_response[\"images\"][0]","    image_data = base64.b64decode(base64_image_data)","","    # Upload the decoded image data to S3","    s3_client.put_object(Bucket=os.environ[\"BUCKET_NAME\"], Key=s3_image_path, Body=image_data)"],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":94},"action":"remove","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    if event['httpMethod'] != \"POST\":","        return generate_response(404, \"Invalid request method\")","    ","    request = json.loads(event['body'])","    ","    generate_image(request['prompt'])","","    return generate_response(200, \"Image generated successfully and uploaded to S3\")","","def generate_response(response_code, message):","    return {","        \"statusCode\": response_code,","        \"body\": message,","        \"headers\": { ","            'Content-Type': 'application/json',","            'Access-Control-Allow-Origin': '*',","            'Access-Control-Allow-Headers': '*',","            \"Access-Control-Allow-Methods\": \"POST\" ","        }","    }","","def generate_image(prompt):","    # Set up the AWS clients","","    bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","    s3_client = boto3.client(\"s3\")","","    # Define the model ID and S3 bucket name (replace with your actual bucket name)","    model_id = \"amazon.titan-image-generator-v1\"","","    seed = random.randint(0, 2147483647)","    s3_image_path = f\"generated_images/titan_{seed}.png\"","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","    model_response = json.loads(response[\"body\"].read())","","    # Extract and decode the Base64 image data","    base64_image_data = model_response[\"images\"][0]","    image_data = base64.b64decode(base64_image_data)","","    # Upload the decoded image data to S3","    s3_client.put_object(Bucket=os.environ[\"BUCKET_NAME\"], Key=s3_image_path, Body=image_data)"],"id":4,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":94},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    if event['httpMethod'] != \"POST\":","        return generate_response(404, \"Invalid request method\")","    ","    request = json.loads(event['body'])","    ","    generate_image(request['prompt'])","","    return generate_response(200, \"Image generated successfully and uploaded to S3\")","","def generate_response(response_code, message):","    return {","        \"statusCode\": response_code,","        \"body\": message,","        \"headers\": { ","            'Content-Type': 'application/json',","            'Access-Control-Allow-Origin': '*',","            'Access-Control-Allow-Headers': '*',","            \"Access-Control-Allow-Methods\": \"POST\" ","        }","    }","","def generate_image(prompt):","    # Set up the AWS clients","","    bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","    s3_client = boto3.client(\"s3\")","","    # Define the model ID and S3 bucket name (replace with your actual bucket name)","    model_id = \"amazon.titan-image-generator-v1\"","","    seed = random.randint(0, 2147483647)","    s3_image_path = f\"generated_images/titan_{seed}.png\"","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","    model_response = json.loads(response[\"body\"].read())","","    # Extract and decode the Base64 image data","    base64_image_data = model_response[\"images\"][0]","    image_data = base64.b64decode(base64_image_data)","","    # Upload the decoded image data to S3","    s3_client.put_object(Bucket=os.environ[\"BUCKET_NAME\"], Key=s3_image_path, Body=image_data)"],"id":5,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":94},"action":"remove","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    if event['httpMethod'] != \"POST\":","        return generate_response(404, \"Invalid request method\")","    ","    request = json.loads(event['body'])","    ","    generate_image(request['prompt'])","","    return generate_response(200, \"Image generated successfully and uploaded to S3\")","","def generate_response(response_code, message):","    return {","        \"statusCode\": response_code,","        \"body\": message,","        \"headers\": { ","            'Content-Type': 'application/json',","            'Access-Control-Allow-Origin': '*',","            'Access-Control-Allow-Headers': '*',","            \"Access-Control-Allow-Methods\": \"POST\" ","        }","    }","","def generate_image(prompt):","    # Set up the AWS clients","","    bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","    s3_client = boto3.client(\"s3\")","","    # Define the model ID and S3 bucket name (replace with your actual bucket name)","    model_id = \"amazon.titan-image-generator-v1\"","","    seed = random.randint(0, 2147483647)","    s3_image_path = f\"generated_images/titan_{seed}.png\"","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","    model_response = json.loads(response[\"body\"].read())","","    # Extract and decode the Base64 image data","    base64_image_data = model_response[\"images\"][0]","    image_data = base64.b64decode(base64_image_data)","","    # Upload the decoded image data to S3","    s3_client.put_object(Bucket=os.environ[\"BUCKET_NAME\"], Key=s3_image_path, Body=image_data)"],"id":6,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":94},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    if event['httpMethod'] != \"POST\":","        return generate_response(404, \"Invalid request method\")","    ","    request = json.loads(event['body'])","    ","    generate_image(request['prompt'])","","    return generate_response(200, \"Image generated successfully and uploaded to S3\")","","def generate_response(response_code, message):","    return {","        \"statusCode\": response_code,","        \"body\": message,","        \"headers\": { ","            'Content-Type': 'application/json',","            'Access-Control-Allow-Origin': '*',","            'Access-Control-Allow-Headers': '*',","            \"Access-Control-Allow-Methods\": \"POST\" ","        }","    }","","def generate_image(prompt):","    # Set up the AWS clients","","    bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","    s3_client = boto3.client(\"s3\")","","    # Define the model ID and S3 bucket name (replace with your actual bucket name)","    model_id = \"amazon.titan-image-generator-v1\"","","    seed = random.randint(0, 2147483647)","    s3_image_path = f\"generated_images/titan_{seed}.png\"","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","    model_response = json.loads(response[\"body\"].read())","","    # Extract and decode the Base64 image data","    base64_image_data = model_response[\"images\"][0]","    image_data = base64.b64decode(base64_image_data)","","    # Upload the decoded image data to S3","    s3_client.put_object(Bucket=os.environ[\"BUCKET_NAME\"], Key=s3_image_path, Body=image_data)"],"id":7,"ignore":true}]]},"ace":{"folds":[],"scrolltop":447,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":26,"state":"start","mode":"ace/mode/python"}},"timestamp":1731537201504,"hash":"cac2c718689ba98dd60c7de22e531cd551e670c9"}